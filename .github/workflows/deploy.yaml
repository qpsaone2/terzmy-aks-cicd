name: Build and Deploy to AKS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'dev'

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_NAME: ${{ secrets.ACR_NAME }}
  IMAGE_NAME: myapp
  AKS_CLUSTER: ${{ secrets.AKS_CLUSTER_NAME }}
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  NAMESPACE: dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # 1. ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # 2. Î≤ÑÏ†Ñ ÌÉúÍ∑∏ ÏÉùÏÑ± (v1.0.x ÌòïÏãù)
    - name: Generate Version Tag
      id: version
      run: |
        # ACRÏóêÏÑú ÌòÑÏû¨ ÏµúÏã† Î≤ÑÏ†Ñ Í∞ÄÏ†∏Ïò§Í∏∞
        LATEST_VERSION=$(az acr repository show-tags \
          --name ${{ secrets.ACR_NAME }} \
          --repository $IMAGE_NAME \
          --orderby time_desc \
          --output tsv 2>/dev/null | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -1)
        
        if [ -z "$LATEST_VERSION" ]; then
          # Ï≤´ Î≤ÑÏ†Ñ
          NEW_VERSION="v1.0.1"
        else
          # ÎßàÏù¥ÎÑà Î≤ÑÏ†Ñ Ï¶ùÍ∞Ä (v1.0.1 -> v1.0.2)
          MAJOR=$(echo $LATEST_VERSION | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo $LATEST_VERSION | cut -d. -f2)
          PATCH=$(echo $LATEST_VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
        fi
        
        echo "VERSION_TAG=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "‚úÖ New version: ${NEW_VERSION}"
    
    # 3. Azure Î°úÍ∑∏Ïù∏
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # 4. ACR Î°úÍ∑∏Ïù∏
    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ secrets.ACR_NAME }}
    
    # 5. Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
    - name: Build Docker Image
      run: |
        cd app
        docker build \
          -t $ACR_LOGIN_SERVER/$IMAGE_NAME:latest \
          -t $ACR_LOGIN_SERVER/$IMAGE_NAME:${{ steps.version.outputs.VERSION_TAG }} \
          .
        
        echo "‚úÖ Built image with tags:"
        echo "  - latest"
        echo "  - ${{ steps.version.outputs.VERSION_TAG }}"
    
    # 6. ACRÏóê Ïù¥ÎØ∏ÏßÄ Ìë∏Ïãú
    - name: Push Image to ACR
      run: |
        docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:latest
        docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:${{ steps.version.outputs.VERSION_TAG }}
        
        echo "‚úÖ Pushed images:"
        echo "  - latest"
        echo "  - ${{ steps.version.outputs.VERSION_TAG }}"
    
    # 7. kubelogin ÏÑ§Ïπò
    - name: Install kubelogin
      run: |
        if command -v kubelogin &> /dev/null; then
          echo "‚úÖ kubelogin already installed"
          kubelogin --version
        else
          echo "üì¶ Installing kubelogin..."
          curl -LO https://github.com/Azure/kubelogin/releases/download/v0.1.4/kubelogin-linux-amd64.zip
          unzip kubelogin-linux-amd64.zip
          sudo mv bin/linux_amd64/kubelogin /usr/local/bin/
          sudo chmod +x /usr/local/bin/kubelogin
          kubelogin --version
        fi
    
    # 8. AKS Context ÏÑ§Ï†ï
    - name: Set AKS Context
      uses: azure/aks-set-context@v3
      with:
        cluster-name: ${{ env.AKS_CLUSTER }}
        resource-group: ${{ env.AKS_RESOURCE_GROUP }}
    
    # 9. kubeconfig Î≥ÄÌôò
    - name: Convert kubeconfig for Azure AD
      run: |
        kubelogin convert-kubeconfig -l azurecli
    
    # 10. Kubernetes Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
    - name: Test Kubernetes Connection
      run: |
        kubectl get nodes
        kubectl get namespaces
    
    # 11. Namespace ÏÉùÏÑ±
    - name: Create Namespace
      run: |
        kubectl apply -f k8s/namespace.yaml
    
    # 12. Kubernetes Secret ÏÉùÏÑ±/ÏóÖÎç∞Ïù¥Ìä∏
    - name: Create/Update Kubernetes Secret
      run: |
        kubectl create secret generic azure-storage-secret \
          --namespace=$NAMESPACE \
          --from-literal=azurestorageaccountname=${{ secrets.STORAGE_ACCOUNT_NAME }} \
          --from-literal=azurestorageaccountkey=${{ secrets.STORAGE_ACCOUNT_KEY }} \
          --dry-run=client -o yaml | kubectl apply -f -
    
    # 13. StorageClass Î∞∞Ìè¨
    - name: Deploy StorageClass
      run: |
        # Ï°¥Ïû¨ Ïó¨Î∂ÄÎßå ÌôïÏù∏ÌïòÍ≥† ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
        if ! kubectl get storageclass azureblob-fuse-premium > /dev/null 2>&1; then
          echo "Creating StorageClass..."
          kubectl create -f k8s/storageclass.yaml
        else
          echo "‚úÖ StorageClass already exists. Using existing one."
        fi
    
    # 14. PVC Î∞∞Ìè¨
    - name: Deploy PVC
      run: |
        kubectl apply -f k8s/pvc.yaml
    
    # 15. Deployment Î∞∞Ìè¨
    - name: Deploy to AKS
      run: |
        VERSION_TAG="${{ steps.version.outputs.VERSION_TAG }}"
        
        if ! kubectl get deployment app-deployment -n $NAMESPACE > /dev/null 2>&1; then
          echo "Creating new deployment..."
          kubectl apply -f k8s/deployment.yaml
        fi
        
        kubectl set image deployment/app-deployment \
          app=$ACR_LOGIN_SERVER/$IMAGE_NAME:$VERSION_TAG \
          --namespace=$NAMESPACE \
          --record
        
        echo "‚úÖ Deployed version: $VERSION_TAG"
    
    # 16. Service Î∞∞Ìè¨
    - name: Deploy Service
      run: |
        kubectl apply -f k8s/service.yaml
    
    # 17. Rollout ÏÉÅÌÉú ÌôïÏù∏
    - name: Check Rollout Status
      run: |
        kubectl rollout status deployment/app-deployment -n $NAMESPACE --timeout=5m
    
    # 18. Î∞∞Ìè¨ Í≤∞Í≥º Ï∂úÎ†•
    - name: Display Deployment Info
      run: |
        echo "=========================================="
        echo "‚úÖ Deployment Successful!"
        echo "=========================================="
        echo ""
        echo "üì¶ Deployed Version: ${{ steps.version.outputs.VERSION_TAG }}"
        echo ""
        
        echo "=== Pods ==="
        kubectl get pods -n $NAMESPACE -l app=myapp
        
        echo ""
        echo "=== Service ==="
        kubectl get svc app-service -n $NAMESPACE
        
        echo ""
        EXTERNAL_IP=$(kubectl get svc app-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
        if [ -z "$EXTERNAL_IP" ]; then
          echo "‚è≥ External IP pending..."
        else
          echo "üåê Access URL: http://$EXTERNAL_IP"
        fi
        
        echo ""
        echo "=== Available Versions in ACR ==="
        az acr repository show-tags \
          --name ${{ secrets.ACR_NAME }} \
          --repository $IMAGE_NAME \
          --orderby time_desc \
          --output table
