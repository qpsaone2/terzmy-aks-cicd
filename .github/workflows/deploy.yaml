name: Build and Deploy to AKS

on:
  # ÏàòÎèô Ïã§ÌñâÎßå Í∞ÄÎä•
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'dev'

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_NAME: ${{ secrets.ACR_NAME }}
  IMAGE_NAME: myapp
  AKS_CLUSTER: ${{ secrets.AKS_CLUSTER_NAME }}
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  NAMESPACE: dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # 1. ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
    - name: Checkout code
      uses: actions/checkout@v4
    
    # 2. Azure Î°úÍ∑∏Ïù∏
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # 3. ACR Î°úÍ∑∏Ïù∏
    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ secrets.ACR_NAME }}
    
    # 4. Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
    - name: Build Docker Image
      run: |
        IMAGE_TAG="${{ github.sha }}"
        echo "Building image: $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG"
        
        cd app
        docker build \
          -t $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG \
          -t $ACR_LOGIN_SERVER/$IMAGE_NAME:latest \
          .
    
    # 5. ACRÏóê Ïù¥ÎØ∏ÏßÄ Ìë∏Ïãú
    - name: Push Image to ACR
      run: |
        IMAGE_TAG="${{ github.sha }}"
        echo "Pushing image: $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG"
        docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG
        
        echo "Pushing image: $ACR_LOGIN_SERVER/$IMAGE_NAME:latest"
        docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:latest
    
    # 6. kubelogin ÏÑ§Ïπò (Azure AD Ïù∏Ï¶ùÏö©)
    - name: Install kubelogin
      run: |
        curl -LO https://github.com/Azure/kubelogin/releases/download/v0.1.4/kubelogin-linux-amd64.zip
        unzip kubelogin-linux-amd64.zip
        sudo mv bin/linux_amd64/kubelogin /usr/local/bin/
        sudo chmod +x /usr/local/bin/kubelogin
        kubelogin --version
    
    # 7. AKS Context ÏÑ§Ï†ï
    - name: Set AKS Context
      uses: azure/aks-set-context@v3
      with:
        cluster-name: ${{ env.AKS_CLUSTER }}
        resource-group: ${{ env.AKS_RESOURCE_GROUP }}
    
    # 8. kubeconfig Î≥ÄÌôò (Azure AD Ïù∏Ï¶ù)
    - name: Convert kubeconfig for Azure AD
      run: |
        kubelogin convert-kubeconfig -l azurecli
    
    # 9. Kubernetes Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
    - name: Test Kubernetes Connection
      run: |
        kubectl cluster-info
        kubectl get nodes
    
    # 10. Namespace ÏÉùÏÑ±
    - name: Create Namespace
      run: |
        echo "Creating namespace: $NAMESPACE"
        kubectl apply -f k8s/namespace.yaml
        kubectl get namespace $NAMESPACE
    
    # 11. Kubernetes Secret ÏÉùÏÑ±/ÏóÖÎç∞Ïù¥Ìä∏ (Storage Account)
    - name: Create/Update Kubernetes Secret
      run: |
        kubectl create secret generic azure-storage-secret \
          --namespace=$NAMESPACE \
          --from-literal=azurestorageaccountname=${{ secrets.STORAGE_ACCOUNT_NAME }} \
          --from-literal=azurestorageaccountkey=${{ secrets.STORAGE_ACCOUNT_KEY }} \
          --dry-run=client -o yaml | kubectl apply -f -
        
        echo "Secret created in namespace: $NAMESPACE"
    
    # 12. StorageClass Î∞∞Ìè¨ (ÌÅ¥Îü¨Ïä§ÌÑ∞ Î†àÎ≤®)
    - name: Deploy StorageClass
      run: |
        kubectl apply -f k8s/storageclass.yaml
        echo "StorageClass deployed"
    
    # 13. PVC Î∞∞Ìè¨
    - name: Deploy PVC
      run: |
        kubectl apply -f k8s/pvc.yaml
        echo "PVC deployed in namespace: $NAMESPACE"
        kubectl get pvc -n $NAMESPACE
    
    # 14. Deployment Î∞∞Ìè¨ (Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ ÏóÖÎç∞Ïù¥Ìä∏)
    - name: Deploy to AKS
      run: |
        IMAGE_TAG="${{ github.sha }}"
        
        # DeploymentÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏúºÎ©¥ ÏÉùÏÑ±
        if ! kubectl get deployment app-deployment -n $NAMESPACE > /dev/null 2>&1; then
          echo "Creating new deployment in namespace: $NAMESPACE"
          kubectl apply -f k8s/deployment.yaml
        fi
        
        # Ïù¥ÎØ∏ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
        kubectl set image deployment/app-deployment \
          app=$ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG \
          --namespace=$NAMESPACE \
          --record
        
        echo "Deployment updated with image: $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG"
    
    # 15. Service Î∞∞Ìè¨
    - name: Deploy Service
      run: |
        kubectl apply -f k8s/service.yaml
        echo "Service deployed in namespace: $NAMESPACE"
    
    # 16. Rollout ÏÉÅÌÉú ÌôïÏù∏
    - name: Check Rollout Status
      run: |
        kubectl rollout status deployment/app-deployment -n $NAMESPACE --timeout=5m
        echo "Deployment completed successfully!"
    
    # 17. Î∞∞Ìè¨ Í≤∞Í≥º Ï∂úÎ†•
    - name: Display Deployment Info
      run: |
        echo "=========================================="
        echo "Deployment Info - Namespace: $NAMESPACE"
        echo "=========================================="
        
        echo ""
        echo "=== Pods ==="
        kubectl get pods -n $NAMESPACE -l app=myapp -o wide
        
        echo ""
        echo "=== Services ==="
        kubectl get svc app-service -n $NAMESPACE
        
        echo ""
        echo "=== PVC ==="
        kubectl get pvc -n $NAMESPACE
        
        echo ""
        echo "=== External IP (LoadBalancer) ==="
        EXTERNAL_IP=$(kubectl get svc app-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -z "$EXTERNAL_IP" ]; then
          echo "‚è≥ External IP is being assigned... Please wait a few minutes."
        else
          echo "‚úÖ External IP: $EXTERNAL_IP"
          echo "üåê Access URL: http://$EXTERNAL_IP"
        fi
        
        echo ""
        echo "=== Namespace Resources ==="
        kubectl get all -n $NAMESPACE
